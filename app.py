import os
import traceback
from flask import Flask, jsonify, render_template, request
from flask_cors import CORS
from dotenv import load_dotenv
from service.gpt_service import suggest_career
import logging
import openai


# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app)

class CareerAdvisor:
    @staticmethod
    def get_error_details(error):
        error_messages = {
            "L·ªói x√°c th·ª±c API Key": "API Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.",
            "V∆∞·ª£t qu√° gi·ªõi h·∫°n request": "ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.",
            "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn OpenAI": "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn OpenAI. Vui l√≤ng ki·ªÉm tra l·∫°i m·∫°ng.",
            "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá": "Y√™u c·∫ßu g·ª≠i ƒë·∫øn OpenAI kh√¥ng h·ª£p l·ªá. H√£y ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o.",
            "Qu√° th·ªùi gian ch·ªù ph·∫£n h·ªìi": "Y√™u c·∫ßu m·∫•t qu√° nhi·ªÅu th·ªùi gian. H√£y th·ª≠ l·∫°i sau ho·∫∑c r√∫t g·ªçn d·ªØ li·ªáu."
        }
        for key, message in error_messages.items():
            if key in str(error):
                return message
        return f"L·ªói h·ªá th·ªëng: {str(error)}"

    @staticmethod
    def validate_inputs(mbti, holland, skills, interests):
        mbti = mbti.strip().upper()
        holland = holland.strip().upper()

        valid_mbti = set("EISNTFJP")
        valid_holland = set("RIASEC")

        if len(mbti) != 4 or any(c not in valid_mbti for c in mbti):
            return False, "MBTI ph·∫£i g·ªìm 4 k√Ω t·ª± h·ª£p l·ªá (E, I, S, N, T, F, J, P)."

        if len(holland) != 2 or any(c not in valid_holland for c in holland):
            return False, "Holland ph·∫£i g·ªìm 2 k√Ω t·ª± h·ª£p l·ªá (R, I, A, S, E, C)."

        if not skills.strip():
            return False, "Vui l√≤ng nh·∫≠p k·ªπ nƒÉng c·ªßa b·∫°n."
        if not interests.strip():
            return False, "Vui l√≤ng nh·∫≠p s·ªü th√≠ch c·ªßa b·∫°n."

        return True, ""

@app.route("/")
def index():
    return render_template("index.html")

CORS(app)

@app.route('/career-result', methods=['POST'])
def career_result():
    try:
        # L·∫•y d·ªØ li·ªáu t·ª´ form
        mbti = request.form.get('mbti', '').strip()
        holland = request.form.get('holland', '').strip()
        skills = request.form.get('skills', '').strip()
        interests = request.form.get('interests', '').strip()

        app.logger.info(f"Data received: MBTI={mbti}, Holland={holland}")

        # Validate
        is_valid, msg = CareerAdvisor.validate_inputs(mbti, holland, skills, interests)
        if not is_valid:
            return render_template('error.html', message=msg), 400

        # G·ªçi GPT
        try:
            suggestion = suggest_career(mbti, holland, skills, interests)
        except Exception as e:
            app.logger.error(f"GPT Error: {str(e)}")
            return render_template('error.html', message=CareerAdvisor.get_error_details(e)), 500

        return render_template('result.html',
                               mbti=mbti,
                               holland=holland,
                               skills=skills,
                               interests=interests,
                               suggestion=suggestion)
    except Exception as e:
        error_trace = traceback.format_exc()
        app.logger.error(f"Unexpected Error: {str(e)}\n{error_trace}")
        return render_template('error.html',
                               message=f"L·ªói h·ªá th·ªëng: {str(e)}<br><pre>{error_trace}</pre>"), 500


# @app.route('/career-result', methods=['POST'])
# def career_result():
#     try:
#         # Nh·∫≠n d·ªØ li·ªáu t·ª´ JSON
#         data = request.get_json()
#         if not data:
#             return jsonify({"error": "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu JSON."}), 400

#         mbti = data.get('mbti', '').strip().upper()
#         holland = data.get('holland', '').strip().upper()
#         skills = data.get('skills', '').strip()
#         interests = data.get('interests', '').strip()

#         app.logger.info(f"Data received: MBTI={mbti}, Holland={holland}")

#         # Validate
#         is_valid, msg = CareerAdvisor.validate_inputs(mbti, holland, skills, interests)
#         if not is_valid:
#             return jsonify({"error": msg}), 400

#         # G·ªçi GPT
#         try:
#             suggestion = suggest_career(mbti, holland, skills, interests)
#         except Exception as e:
#             app.logger.error(f"GPT Error: {str(e)}")
#             return jsonify({"error": CareerAdvisor.get_error_details(e)}), 500

#         return jsonify({
#             "mbti": mbti,
#             "holland": holland,
#             "skills": skills,
#             "interests": interests,
#             "suggestion": suggestion
#         })

#     except Exception as e:
#         error_trace = traceback.format_exc()
#         app.logger.error(f"Unexpected Error: {str(e)}\n{error_trace}")
#         return jsonify({
#             "error": f"L·ªói h·ªá th·ªëng: {str(e)}",
#             "trace": error_trace
#         }), 500

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)

# L·∫•y API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
openai.api_key = os.getenv("OPENAI_API_KEY")

# M·∫∑c ƒë·ªãnh d√πng model gpt-3.5-turbo, c√≥ th·ªÉ ch·ªânh sau n√†y
DEFAULT_MODEL = "ft:gpt-3.5-turbo-0125:personal::BLnytmJ2"

@app.route('/chatbot', methods=['POST'])
def chatbot():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"reply": "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ x·ª≠ l√Ω."}), 400

        logging.info(f"User message: {user_message}")

        response = openai.ChatCompletion.create(
            model=DEFAULT_MODEL,
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt chatbot t∆∞ v·∫•n ngh·ªÅ nghi·ªáp d·ªÖ th∆∞∆°ng, h√†i h∆∞·ªõc v√† th√¢n thi·ªán."},
                {"role": "user", "content": user_message}
            ]
        )

        reply = response.choices[0].message['content'].strip()
        logging.info(f"Bot reply: {reply}")
        return jsonify({"reply": reply})

    except Exception as e:
        logging.error(f"L·ªói khi g·ªçi OpenAI: {e}")
        return jsonify({"reply": "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau üò•"}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=int(os.getenv('PORT', 5000)))
