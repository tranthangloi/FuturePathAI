import openai
from config import OPENAI_API_KEY
from openai.error import (
    AuthenticationError, RateLimitError, APIConnectionError,
    InvalidRequestError, Timeout
)

# Thi·∫øt l·∫≠p API Key
openai.api_key = OPENAI_API_KEY

def suggest_career(mbti, holland, skills, interests):
    """
    G·ª£i √Ω ngh·ªÅ nghi·ªáp d·ª±a tr√™n MBTI, Holland, k·ªπ nƒÉng v√† s·ªü th√≠ch.
    """

    prompt = (
        f"MBTI: {mbti}\n"
        f"Holland: {holland}\n"
        f"K·ªπ nƒÉng: {skills}\n"
        f"S·ªü th√≠ch: {interests}\n"
        "D·ª±a tr√™n th√¥ng tin tr√™n, h√£y g·ª£i √Ω 3 ngh·ªÅ nghi·ªáp ph√π h·ª£p nh·∫•t theo ƒë·ªãnh d·∫°ng sau:\n"
        "1. T√™n ngh·ªÅ nghi·ªáp\n"
        "- M√¥ t·∫£ ng·∫Øn g·ªçn ngh·ªÅ ƒë√≥\n"
        "- L√Ω do v√¨ sao ph√π h·ª£p v·ªõi ng∆∞·ªùi d√πng\n"
        "- Nh·ªØng k·ªπ nƒÉng c·∫ßn thi·∫øt cho ngh·ªÅ ƒë√≥\n\n"
        "Tr√¨nh b√†y t·ª´ng ngh·ªÅ t·ª´ 1 ƒë·∫øn 3."
    )

    try:
        response = openai.ChatCompletion.create(
            model="ft:gpt-3.5-turbo-0125:personal::BLkYCPve",
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n h∆∞·ªõng nghi·ªáp."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=1000,
            timeout=15
        )

        choices = response.get("choices", [])
        if not choices or "message" not in choices[0] or "content" not in choices[0]["message"]:
            raise Exception("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ GPT.")

        return choices[0]["message"]["content"]

    except AuthenticationError as e:
        raise Exception("‚ùå L·ªói x√°c th·ª±c API Key. Vui l√≤ng ki·ªÉm tra l·∫°i.") from e
    except RateLimitError as e:
        raise Exception("‚ö†Ô∏è ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n g·ªçi API. Vui l√≤ng th·ª≠ l·∫°i sau.") from e
    except APIConnectionError as e:
        raise Exception("üîå L·ªói k·∫øt n·ªëi ƒë·∫øn OpenAI. Ki·ªÉm tra l·∫°i m·∫°ng.") from e
    except InvalidRequestError as e:
        raise Exception(f"üìé Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá: {str(e)}") from e
    except Timeout as e:
        raise Exception("‚è±Ô∏è Qu√° th·ªùi gian ch·ªù ph·∫£n h·ªìi t·ª´ GPT.") from e
    except Exception as e:
        raise Exception(f"‚ùó L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}") from e
